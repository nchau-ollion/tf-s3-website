{
  "version": 4,
  "terraform_version": "1.2.9",
  "serial": 75,
  "lineage": "4ad5ee9d-fbdf-6af9-f27f-c81024f385e6",
  "outputs": {
    "aws_s3_bucket": {
      "value": "quickly-cool-raccoon",
      "type": "string"
    },
    "website_endpoint": {
      "value": "http://quickly-cool-raccoon.s3-website-us-west-1.amazonaws.com/index.html",
      "type": "string"
    }
  },
  "resources": [
    {
      "mode": "data",
      "type": "aws_vpcs",
      "name": "nchau-vpc",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filter": [
              {
                "name": "tag:Name",
                "values": [
                  "nchau-vpc"
                ]
              }
            ],
            "id": "us-west-1",
            "ids": [],
            "tags": null,
            "timeouts": null
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_s3_bucket",
      "name": "nc-bucket",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "acceleration_status": "",
            "acl": null,
            "arn": "arn:aws:s3:::quickly-cool-raccoon",
            "bucket": "quickly-cool-raccoon",
            "bucket_domain_name": "quickly-cool-raccoon.s3.amazonaws.com",
            "bucket_prefix": "",
            "bucket_regional_domain_name": "quickly-cool-raccoon.s3.us-west-1.amazonaws.com",
            "cors_rule": [],
            "force_destroy": true,
            "grant": [
              {
                "id": "e1c87a9068d5914ef234ae712f56df691ef60161cef466df340750ff5aff02bf",
                "permissions": [
                  "FULL_CONTROL"
                ],
                "type": "CanonicalUser",
                "uri": ""
              }
            ],
            "hosted_zone_id": "Z2F56UZL2M1ACD",
            "id": "quickly-cool-raccoon",
            "lifecycle_rule": [],
            "logging": [],
            "object_lock_configuration": [],
            "object_lock_enabled": false,
            "policy": "",
            "region": "us-west-1",
            "replication_configuration": [],
            "request_payer": "BucketOwner",
            "server_side_encryption_configuration": [
              {
                "rule": [
                  {
                    "apply_server_side_encryption_by_default": [
                      {
                        "kms_master_key_id": "",
                        "sse_algorithm": "AES256"
                      }
                    ],
                    "bucket_key_enabled": false
                  }
                ]
              }
            ],
            "tags": {
              "Name": "nchau",
              "Project": "Terraform"
            },
            "tags_all": {
              "Name": "nchau",
              "Project": "Terraform"
            },
            "timeouts": null,
            "versioning": [
              {
                "enabled": false,
                "mfa_delete": false
              }
            ],
            "website": [],
            "website_domain": null,
            "website_endpoint": null
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjM2MDAwMDAwMDAwMDAsInJlYWQiOjEyMDAwMDAwMDAwMDAsInVwZGF0ZSI6MTIwMDAwMDAwMDAwMH19",
          "dependencies": [
            "random_pet.name"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_s3_bucket_acl",
      "name": "bucket",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "access_control_policy": [
              {
                "grant": [
                  {
                    "grantee": [
                      {
                        "display_name": "",
                        "email_address": "",
                        "id": "",
                        "type": "Group",
                        "uri": "http://acs.amazonaws.com/groups/global/AllUsers"
                      }
                    ],
                    "permission": "READ"
                  },
                  {
                    "grantee": [
                      {
                        "display_name": "2WCompanySandbox",
                        "email_address": "",
                        "id": "e1c87a9068d5914ef234ae712f56df691ef60161cef466df340750ff5aff02bf",
                        "type": "CanonicalUser",
                        "uri": ""
                      }
                    ],
                    "permission": "FULL_CONTROL"
                  }
                ],
                "owner": [
                  {
                    "display_name": "2WCompanySandbox",
                    "id": "e1c87a9068d5914ef234ae712f56df691ef60161cef466df340750ff5aff02bf"
                  }
                ]
              }
            ],
            "acl": "public-read",
            "bucket": "quickly-cool-raccoon",
            "expected_bucket_owner": "",
            "id": "quickly-cool-raccoon,public-read"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_s3_bucket.nc-bucket",
            "aws_s3_bucket_ownership_controls.bucket",
            "aws_s3_bucket_public_access_block.bucket",
            "random_pet.name"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_s3_bucket_ownership_controls",
      "name": "bucket",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "bucket": "quickly-cool-raccoon",
            "id": "quickly-cool-raccoon",
            "rule": [
              {
                "object_ownership": "BucketOwnerPreferred"
              }
            ]
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_s3_bucket.nc-bucket",
            "random_pet.name"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_s3_bucket_policy",
      "name": "bucket",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "bucket": "quickly-cool-raccoon",
            "id": "quickly-cool-raccoon",
            "policy": "{\"Statement\":[{\"Action\":[\"s3:GetObject\"],\"Effect\":\"Allow\",\"Principal\":\"*\",\"Resource\":[\"arn:aws:s3:::quickly-cool-raccoon/*\"],\"Sid\":\"PublicReadGetObject\"}],\"Version\":\"2012-10-17\"}"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_s3_bucket.nc-bucket",
            "aws_s3_bucket_acl.bucket",
            "aws_s3_bucket_ownership_controls.bucket",
            "aws_s3_bucket_public_access_block.bucket",
            "random_pet.name"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_s3_bucket_public_access_block",
      "name": "bucket",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "block_public_acls": false,
            "block_public_policy": false,
            "bucket": "quickly-cool-raccoon",
            "id": "quickly-cool-raccoon",
            "ignore_public_acls": false,
            "restrict_public_buckets": false
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_s3_bucket.nc-bucket",
            "random_pet.name"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_s3_bucket_website_configuration",
      "name": "bucket",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "bucket": "quickly-cool-raccoon",
            "error_document": [],
            "expected_bucket_owner": "",
            "id": "quickly-cool-raccoon",
            "index_document": [
              {
                "suffix": "index.html"
              }
            ],
            "redirect_all_requests_to": [],
            "routing_rule": [],
            "routing_rules": "",
            "website_domain": "s3-website-us-west-1.amazonaws.com",
            "website_endpoint": "quickly-cool-raccoon.s3-website-us-west-1.amazonaws.com"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_s3_bucket.nc-bucket",
            "random_pet.name"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_s3_object",
      "name": "tetris",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "acl": null,
            "bucket": "quickly-cool-raccoon",
            "bucket_key_enabled": false,
            "cache_control": "",
            "checksum_algorithm": null,
            "checksum_crc32": "",
            "checksum_crc32c": "",
            "checksum_sha1": "",
            "checksum_sha256": "",
            "content": "\u003c!DOCTYPE html\u003e\r\n\u003chtml lang='en'\u003e\r\n \r\n\u003chead\u003e\r\n    \u003cmeta charset='UTF-8'\u003e\r\n    \u003cstyle\u003e\r\n        canvas {\r\n            position: absolute;\r\n            top: 45%;\r\n            left: 50%;\r\n            width: 640px;\r\n            height: 640px;\r\n            margin: -320px 0 0 -320px;\r\n        }\r\n    \u003c/style\u003e\r\n\u003c/head\u003e\r\n \r\n\u003cbody\u003e\r\n    \u003ccanvas\u003e\u003c/canvas\u003e\r\n    \u003cscript\u003e\r\n        'use strict';\r\n        var canvas = document.querySelector('canvas');\r\n        canvas.width = 640;\r\n        canvas.height = 640;\r\n \r\n        var g = canvas.getContext('2d');\r\n \r\n        var right = { x: 1, y: 0 };\r\n        var down = { x: 0, y: 1 };\r\n        var left = { x: -1, y: 0 };\r\n \r\n        var EMPTY = -1;\r\n        var BORDER = -2;\r\n \r\n        var fallingShape;\r\n        var nextShape;\r\n        var dim = 640;\r\n        var nRows = 18;\r\n        var nCols = 12;\r\n        var blockSize = 30;\r\n        var topMargin = 50;\r\n        var leftMargin = 20;\r\n        var scoreX = 400;\r\n        var scoreY = 330;\r\n        var titleX = 130;\r\n        var titleY = 160;\r\n        var clickX = 120;\r\n        var clickY = 400;\r\n        var previewCenterX = 467;\r\n        var previewCenterY = 97;\r\n        var mainFont = 'bold 48px monospace';\r\n        var smallFont = 'bold 18px monospace';\r\n        var colors = ['green', 'red', 'blue', 'purple', 'orange', 'yellow', 'magenta'];\r\n        var gridRect = { x: 46, y: 47, w: 308, h: 517 };\r\n        var previewRect = { x: 387, y: 47, w: 200, h: 200 };\r\n        var titleRect = { x: 100, y: 95, w: 252, h: 100 };\r\n        var clickRect = { x: 50, y: 375, w: 252, h: 40 };\r\n        var outerRect = { x: 5, y: 5, w: 630, h: 630 };\r\n        var squareBorder = 'white';\r\n        var titlebgColor = 'white';\r\n        var textColor = 'black';\r\n        var bgColor = '#DDEEFF';\r\n        var gridColor = '#BECFEA';\r\n        var gridBorderColor = '#7788AA';\r\n        var largeStroke = 5;\r\n        var smallStroke = 2;\r\n \r\n        // position of falling shape\r\n        var fallingShapeRow;\r\n        var fallingShapeCol;\r\n \r\n        var keyDown = false;\r\n        var fastDown = false;\r\n \r\n        var grid = [];\r\n        var scoreboard = new Scoreboard();\r\n \r\n        addEventListener('keydown', function (event) {\r\n            if (!keyDown) {\r\n                keyDown = true;\r\n \r\n                if (scoreboard.isGameOver())\r\n                    return;\r\n \r\n                switch (event.key) {\r\n \r\n                    case 'w':\r\n                    case 'ArrowUp':\r\n                        if (canRotate(fallingShape))\r\n                            rotate(fallingShape);\r\n                        break;\r\n \r\n                    case 'a':\r\n                    case 'ArrowLeft':\r\n                        if (canMove(fallingShape, left))\r\n                            move(left);\r\n                        break;\r\n \r\n                    case 'd':\r\n                    case 'ArrowRight':\r\n                        if (canMove(fallingShape, right))\r\n                            move(right);\r\n                        break;\r\n \r\n                    case 's':\r\n                    case 'ArrowDown':\r\n                        if (!fastDown) {\r\n                            fastDown = true;\r\n                            while (canMove(fallingShape, down)) {\r\n                                move(down);\r\n                                draw();\r\n                            }\r\n                            shapeHasLanded();\r\n                        }\r\n                }\r\n                draw();\r\n            }\r\n        });\r\n \r\n        addEventListener('click', function () {\r\n            startNewGame();\r\n        });\r\n \r\n        addEventListener('keyup', function () {\r\n            keyDown = false;\r\n            fastDown = false;\r\n        });\r\n \r\n        function canRotate(s) {\r\n            if (s === Shapes.Square)\r\n                return false;\r\n \r\n            var pos = new Array(4);\r\n            for (var i = 0; i \u003c pos.length; i++) {\r\n                pos[i] = s.pos[i].slice();\r\n            }\r\n \r\n            pos.forEach(function (row) {\r\n                var tmp = row[0];\r\n                row[0] = row[1];\r\n                row[1] = -tmp;\r\n            });\r\n \r\n            return pos.every(function (p) {\r\n                var newCol = fallingShapeCol + p[0];\r\n                var newRow = fallingShapeRow + p[1];\r\n                return grid[newRow][newCol] === EMPTY;\r\n            });\r\n        }\r\n \r\n        function rotate(s) {\r\n            if (s === Shapes.Square)\r\n                return;\r\n \r\n            s.pos.forEach(function (row) {\r\n                var tmp = row[0];\r\n                row[0] = row[1];\r\n                row[1] = -tmp;\r\n            });\r\n        }\r\n \r\n        function move(dir) {\r\n            fallingShapeRow += dir.y;\r\n            fallingShapeCol += dir.x;\r\n        }\r\n \r\n        function canMove(s, dir) {\r\n            return s.pos.every(function (p) {\r\n                var newCol = fallingShapeCol + dir.x + p[0];\r\n                var newRow = fallingShapeRow + dir.y + p[1];\r\n                return grid[newRow][newCol] === EMPTY;\r\n            });\r\n        }\r\n \r\n        function shapeHasLanded() {\r\n            addShape(fallingShape);\r\n            if (fallingShapeRow \u003c 2) {\r\n                scoreboard.setGameOver();\r\n                scoreboard.setTopscore();\r\n            } else {\r\n                scoreboard.addLines(removeLines());\r\n            }\r\n            selectShape();\r\n        }\r\n \r\n        function removeLines() {\r\n            var count = 0;\r\n            for (var r = 0; r \u003c nRows - 1; r++) {\r\n                for (var c = 1; c \u003c nCols - 1; c++) {\r\n                    if (grid[r][c] === EMPTY)\r\n                        break;\r\n                    if (c === nCols - 2) {\r\n                        count++;\r\n                        removeLine(r);\r\n                    }\r\n                }\r\n            }\r\n            return count;\r\n        }\r\n \r\n        function removeLine(line) {\r\n            for (var c = 0; c \u003c nCols; c++)\r\n                grid[line][c] = EMPTY;\r\n \r\n            for (var c = 0; c \u003c nCols; c++) {\r\n                for (var r = line; r \u003e 0; r--)\r\n                    grid[r][c] = grid[r - 1][c];\r\n            }\r\n        }\r\n \r\n        function addShape(s) {\r\n            s.pos.forEach(function (p) {\r\n                grid[fallingShapeRow + p[1]][fallingShapeCol + p[0]] = s.ordinal;\r\n            });\r\n        }\r\n \r\n        function Shape(shape, o) {\r\n            this.shape = shape;\r\n            this.pos = this.reset();\r\n            this.ordinal = o;\r\n        }\r\n \r\n        var Shapes = {\r\n            ZShape: [[0, -1], [0, 0], [-1, 0], [-1, 1]],\r\n            SShape: [[0, -1], [0, 0], [1, 0], [1, 1]],\r\n            IShape: [[0, -1], [0, 0], [0, 1], [0, 2]],\r\n            TShape: [[-1, 0], [0, 0], [1, 0], [0, 1]],\r\n            Square: [[0, 0], [1, 0], [0, 1], [1, 1]],\r\n            LShape: [[-1, -1], [0, -1], [0, 0], [0, 1]],\r\n            JShape: [[1, -1], [0, -1], [0, 0], [0, 1]]\r\n        };\r\n \r\n        function getRandomShape() {\r\n            var keys = Object.keys(Shapes);\r\n            var ord = Math.floor(Math.random() * keys.length);\r\n            var shape = Shapes[keys[ord]];\r\n            return new Shape(shape, ord);\r\n        }\r\n \r\n        Shape.prototype.reset = function () {\r\n            this.pos = new Array(4);\r\n            for (var i = 0; i \u003c this.pos.length; i++) {\r\n                this.pos[i] = this.shape[i].slice();\r\n            }\r\n            return this.pos;\r\n        }\r\n \r\n        function selectShape() {\r\n            fallingShapeRow = 1;\r\n            fallingShapeCol = 5;\r\n            fallingShape = nextShape;\r\n            nextShape = getRandomShape();\r\n            if (fallingShape != null) {\r\n                fallingShape.reset();\r\n            }\r\n        }\r\n \r\n        function Scoreboard() {\r\n            this.MAXLEVEL = 9;\r\n \r\n            var level = 0;\r\n            var lines = 0;\r\n            var score = 0;\r\n            var topscore = 0;\r\n            var gameOver = true;\r\n \r\n            this.reset = function () {\r\n                this.setTopscore();\r\n                level = lines = score = 0;\r\n                gameOver = false;\r\n            }\r\n \r\n            this.setGameOver = function () {\r\n                gameOver = true;\r\n            }\r\n \r\n            this.isGameOver = function () {\r\n                return gameOver;\r\n            }\r\n \r\n            this.setTopscore = function () {\r\n                if (score \u003e topscore) {\r\n                    topscore = score;\r\n                }\r\n            }\r\n \r\n            this.getTopscore = function () {\r\n                return topscore;\r\n            }\r\n \r\n            this.getSpeed = function () {\r\n \r\n                switch (level) {\r\n                    case 0: return 700;\r\n                    case 1: return 600;\r\n                    case 2: return 500;\r\n                    case 3: return 400;\r\n                    case 4: return 350;\r\n                    case 5: return 300;\r\n                    case 6: return 250;\r\n                    case 7: return 200;\r\n                    case 8: return 150;\r\n                    case 9: return 100;\r\n                    default: return 100;\r\n                }\r\n            }\r\n \r\n            this.addScore = function (sc) {\r\n                score += sc;\r\n            }\r\n \r\n            this.addLines = function (line) {\r\n \r\n                switch (line) {\r\n                    case 1:\r\n                        this.addScore(10);\r\n                        break;\r\n                    case 2:\r\n                        this.addScore(20);\r\n                        break;\r\n                    case 3:\r\n                        this.addScore(30);\r\n                        break;\r\n                    case 4:\r\n                        this.addScore(40);\r\n                        break;\r\n                    default:\r\n                        return;\r\n                }\r\n \r\n                lines += line;\r\n                if (lines \u003e 10) {\r\n                    this.addLevel();\r\n                }\r\n            }\r\n \r\n            this.addLevel = function () {\r\n                lines %= 10;\r\n                if (level \u003c this.MAXLEVEL) {\r\n                    level++;\r\n                }\r\n            }\r\n \r\n            this.getLevel = function () {\r\n                return level;\r\n            }\r\n \r\n            this.getLines = function () {\r\n                return lines;\r\n            }\r\n \r\n            this.getScore = function () {\r\n                return score;\r\n            }\r\n        }\r\n \r\n        function draw() {\r\n            g.clearRect(0, 0, canvas.width, canvas.height);\r\n \r\n            drawUI();\r\n \r\n            if (scoreboard.isGameOver()) {\r\n                drawStartScreen();\r\n            } else {\r\n                drawFallingShape();\r\n            }\r\n        }\r\n \r\n        function drawStartScreen() {\r\n            g.font = mainFont;\r\n \r\n            fillRect(titleRect, titlebgColor);\r\n            fillRect(clickRect, titlebgColor);\r\n \r\n            g.fillStyle = textColor;\r\n            g.fillText('Tetris', titleX, titleY);\r\n \r\n            g.font = smallFont;\r\n            g.fillText('click to start', clickX, clickY);\r\n        }\r\n \r\n        function fillRect(r, color) {\r\n            g.fillStyle = color;\r\n            g.fillRect(r.x, r.y, r.w, r.h);\r\n        }\r\n \r\n        function drawRect(r, color) {\r\n            g.strokeStyle = color;\r\n            g.strokeRect(r.x, r.y, r.w, r.h);\r\n        }\r\n \r\n        function drawSquare(colorIndex, r, c) {\r\n            var bs = blockSize;\r\n            g.fillStyle = colors[colorIndex];\r\n            g.fillRect(leftMargin + c * bs, topMargin + r * bs, bs, bs);\r\n \r\n            g.lineWidth = smallStroke;\r\n            g.strokeStyle = squareBorder;\r\n            g.strokeRect(leftMargin + c * bs, topMargin + r * bs, bs, bs);\r\n        }\r\n \r\n        function drawUI() {\r\n \r\n            // background\r\n            fillRect(outerRect, bgColor);\r\n            fillRect(gridRect, gridColor);\r\n \r\n            // the blocks dropped in the grid\r\n            for (var r = 0; r \u003c nRows; r++) {\r\n                for (var c = 0; c \u003c nCols; c++) {\r\n                    var idx = grid[r][c];\r\n                    if (idx \u003e EMPTY)\r\n                        drawSquare(idx, r, c);\r\n                }\r\n            }\r\n \r\n            // the borders of grid and preview panel\r\n            g.lineWidth = largeStroke;\r\n            drawRect(gridRect, gridBorderColor);\r\n            drawRect(previewRect, gridBorderColor);\r\n            drawRect(outerRect, gridBorderColor);\r\n \r\n            // scoreboard\r\n            g.fillStyle = textColor;\r\n            g.font = smallFont;\r\n            g.fillText('hiscore    ' + scoreboard.getTopscore(), scoreX, scoreY);\r\n            g.fillText('level      ' + scoreboard.getLevel(), scoreX, scoreY + 30);\r\n            g.fillText('lines      ' + scoreboard.getLines(), scoreX, scoreY + 60);\r\n            g.fillText('score      ' + scoreboard.getScore(), scoreX, scoreY + 90);\r\n \r\n            // preview\r\n            var minX = 5, minY = 5, maxX = 0, maxY = 0;\r\n            nextShape.pos.forEach(function (p) {\r\n                minX = Math.min(minX, p[0]);\r\n                minY = Math.min(minY, p[1]);\r\n                maxX = Math.max(maxX, p[0]);\r\n                maxY = Math.max(maxY, p[1]);\r\n            });\r\n            var cx = previewCenterX - ((minX + maxX + 1) / 2.0 * blockSize);\r\n            var cy = previewCenterY - ((minY + maxY + 1) / 2.0 * blockSize);\r\n \r\n            g.translate(cx, cy);\r\n            nextShape.shape.forEach(function (p) {\r\n                drawSquare(nextShape.ordinal, p[1], p[0]);\r\n            });\r\n            g.translate(-cx, -cy);\r\n        }\r\n \r\n        function drawFallingShape() {\r\n            var idx = fallingShape.ordinal;\r\n            fallingShape.pos.forEach(function (p) {\r\n                drawSquare(idx, fallingShapeRow + p[1], fallingShapeCol + p[0]);\r\n            });\r\n        }\r\n \r\n       function animate(lastFrameTime) {\r\n            var requestId = requestAnimationFrame(function () {\r\n                animate(lastFrameTime);\r\n            });\r\n \r\n            var time = new Date().getTime();\r\n            var delay = scoreboard.getSpeed();\r\n \r\n            if (lastFrameTime + delay \u003c time) {\r\n \r\n                if (!scoreboard.isGameOver()) {\r\n \r\n                    if (canMove(fallingShape, down)) {\r\n                        move(down);\r\n                    } else {\r\n                        shapeHasLanded();\r\n                    }\r\n                    draw();\r\n                    lastFrameTime = time;\r\n \r\n                } else {\r\n                    cancelAnimationFrame(requestId);\r\n                }\r\n            }\r\n        }\r\n \r\n        function startNewGame() {\r\n            initGrid();\r\n            selectShape();\r\n            scoreboard.reset();\r\n            animate(-1);\r\n        }\r\n \r\n        function initGrid() {\r\n            function fill(arr, value) {\r\n                for (var i = 0; i \u003c arr.length; i++) {\r\n                    arr[i] = value;\r\n                }\r\n            }\r\n            for (var r = 0; r \u003c nRows; r++) {\r\n                grid[r] = new Array(nCols);\r\n                fill(grid[r], EMPTY);\r\n                for (var c = 0; c \u003c nCols; c++) {\r\n                    if (c === 0 || c === nCols - 1 || r === nRows - 1)\r\n                        grid[r][c] = BORDER;\r\n                }\r\n            }\r\n        }\r\n \r\n        function init() {\r\n            initGrid();\r\n            selectShape();\r\n            draw();\r\n        }\r\n \r\n        init();\r\n    \u003c/script\u003e\r\n \r\n\u003c/body\u003e\r\n \r\n\u003c/html\u003e",
            "content_base64": null,
            "content_disposition": "",
            "content_encoding": "",
            "content_language": "",
            "content_type": "text/html",
            "etag": "18fce278f3e9cc898daa77da7d86d0f6",
            "force_destroy": false,
            "id": "index.html",
            "key": "index.html",
            "kms_key_id": null,
            "metadata": null,
            "object_lock_legal_hold_status": "",
            "object_lock_mode": "",
            "object_lock_retain_until_date": "",
            "override_provider": [],
            "server_side_encryption": "AES256",
            "source": null,
            "source_hash": null,
            "storage_class": "STANDARD",
            "tags": null,
            "tags_all": {},
            "version_id": "",
            "website_redirect": ""
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_s3_bucket.nc-bucket",
            "random_pet.name"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "random_pet",
      "name": "name",
      "provider": "provider[\"registry.terraform.io/hashicorp/random\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "quickly-cool-raccoon",
            "keepers": null,
            "length": 3,
            "prefix": null,
            "separator": "-"
          },
          "sensitive_attributes": []
        }
      ]
    }
  ]
}
